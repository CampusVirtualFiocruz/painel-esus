name: Build and Deploy Windows Service

on:
  push:
    branches: [v*]

jobs:
  build-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install dependencies
        working-directory: ./paineis-v2-front
        run: yarn

      - name: Build React project
        working-directory: ./paineis-v2-front
        run: |
          cat <<EOF > .env
          ${{ vars.ENV_FRONT }}
          EOF
          CI=false npm run build --prod

      - name: Print directory
        run: |
          ls -la
          cd ./paineis-v2-front/static-files
          ls -la

      # Salva a pasta 'paineis-v2-front/static-files' como um artifact
      - uses: actions/upload-artifact@v4
        with:
          name: Build
          path: ./paineis-v2-front/static-files

  build-backend:
    runs-on: ubuntu-latest
    needs: [build-frontend]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10" # Use the Python version you need

      - name: Install PyInstaller
        working-directory: ./painel-esus
        run: |
          ls -la
          python -m pip install --upgrade pip
          pip3 install -r requirements.txt

      - name: Build EXE config
        working-directory: ./painel-esus
        run: |
          pyinstaller --icon=./icon/config.ico -n config --onefile ./interface.py --hidden-import='PIL._tkinter_finder'
          cd dist
          ls -la

      - name: Build EXE run
        working-directory: ./painel-esus
        run: |
          pyinstaller --icon=./icon/Icon_Painel_Purple_ICO.ico -n painel-esus --onefile --collect-all pyarrow run.py
          cd dist
          ls -la

      - name: Remove static-files
        run: |
          rm -rf ./paineis-v2-front/static-files
          cd ./paineis-v2-front
          ls -la

      - name: Download files
        uses: actions/download-artifact@v4
        with:
          name: Build
          path: ./paineis-v2-front/static-files
      - run: |
          ls -la
          cd ./paineis-v2-front
          ls -la

      - name: Validate files and compress
        run: |
          ls -la
          version="${{ github.head_ref || github.ref_name }}"
          clean_version=$(echo "$version" | sed 's/^v//')
          tar -czf painel-esus-setup$clean_version.tar.gz \
            -C $(pwd)/painel-esus ibge.csv \
            -C $(pwd)/painel-esus/interface icon \
            -C $(pwd)/paineis-v2-front static-files \
            -C $(pwd)/painel-esus/dist/ config \
            -C $(pwd)/painel-esus/dist/ painel-esus

      # - name: Upload para AWS S3
      #   if: success() # Executa este step apenas se o build for bem-sucedido
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     AWS_REGION: "us-east-1"
      #   run: |
      #     version="${{ github.head_ref || github.ref_name }}"
      #     clean_version=$(echo "$version" | sed 's/^v//')
      #     aws s3 cp painel-esus-setup$clean_version.tar.gz \
      #     "s3://painel-esus-public/instalador/"
      #   shell: bash
      # - name: Validate files and compress
      #   run: |
      #     version="${{ github.head_ref || github.ref_name }}"
      #     clean_version=$(echo "$version" | sed 's/^v//')
      #     mv painel-esus-setup$clean_version.tar.gz painel-esus-setup-linux.tar.gz

  create-exe-files:
    needs: [build-backend]
    runs-on: windows-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Download files
        uses: actions/download-artifact@v4
        with:
          name: Build
          path: ./paineis-v2-front/static-files
      - run: dir

      - name: List Downloaded Files
        run: |
          # Comandos para usar os arquivos estáticos e criar o EXE
          cd ./paineis-v2-front
          dir
          cd ./static-files
          dir

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10" # Use the Python version you need

      - name: Install PyInstaller
        run: pip install pyinstaller
        shell: cmd

      - name: Download NSSM
        run: |
          curl -L -o nssm.zip https://nssm.cc/release/nssm-2.24.zip
          powershell -Command "Expand-Archive -Path nssm.zip -DestinationPath ."
          copy .\nssm-2.24\win64\nssm.exe .\painel-esus\nssm.exe
        shell: cmd

      - name: Build EXE config
        working-directory: ./painel-esus/interface
        run: |
          python -m pip install --upgrade pip
          pip3 install -r requirements-interface.txt
          pyinstaller --icon=.\icon\config.ico -n config --onefile .\__main__.py
        shell: cmd

      - name: Build EXE run
        working-directory: ./painel-esus
        run: |
          pyinstaller --icon=.\interface\icon\Icon_Painel_Purple_ICO.ico -n painel-esus --onefile .\run.py
        shell: cmd


      - name: Set up Inno Setup
        run: |
          curl -LO https://jrsoftware.org/download.php/is.exe
          start /wait is.exe /SILENT /VERYSILENT
        shell: cmd

      - name: Build installer
        run: |
          dir .
          cd painel-esus\interface\dist
          dir .
          "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" ".\instalador\buildPainelScript-windows-service.iss"
        shell: cmd

      # - name: Upload para AWS S3
      #   if: success() # Executa este step apenas se o build for bem-sucedido
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     AWS_REGION: "us-east-1"
      #   run: |
      #     aws s3 cp "D:/a/painel-esus/painel-esus/instalador/output/" \
      #     "s3://painel-esus-public/instalador/" --recursive --exclude "*" --include "painel-esus-setup*"
      #   shell: bash

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: painel-esus
          path: D:\a\painel-esus\painel-esus\instalador\output
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: painel-esus


  notify-slack:
    runs-on: ubuntu-latest
    needs: create-exe-files

    steps:
      - name: Notify Slack
        run: |
          version="${{ github.head_ref || github.ref_name }}"
          clean_version=$(echo "$version" | sed 's/^v//')
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} -H 'Content-type: application/json' \
            --data '{"text": "*Instalador Gerado* :inbox_tray:\n  Versão: *'"$clean_version"'* \n Download-windows: https://painel-esus-public.s3.sa-east-1.amazonaws.com/instalador/painel-esus-setup'"$clean_version"'.exe" \n Download-linux: https://painel-esus-public.s3.sa-east-1.amazonaws.com/instalador/painel-esus-setup'"$clean_version"'.tar.gz"}'

