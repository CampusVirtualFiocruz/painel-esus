name: Build and Deploy to Private Docker Hub

on:
  push:
    branches: [release/*]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install dependencies
        working-directory: ./paineis-v2-front
        run: yarn

      - name: Extract version from branch name
        id: extract_version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/heads/release/}" >> $GITHUB_ENV
        
      - name: Build React project
        working-directory: ./paineis-v2-front
        run: |
          cat <<EOF > .env
          REACT_APP_ENV=production
          BUILD_PATH=static-files
          REACT_APP_VERSION=${{ env.RELEASE_VERSION }}
          REACT_APP_LAST_UPDATE=$(date +"%d/%m/%Y")
          EOF
          CI=false npm run build --prod

      - name: Create backend environment
        working-directory: ./painel-esus
        run: |
          cat <<EOF > .env
          ${{ vars.ENV_BACK }}
          EOF

      - name: Build Docker image
        run: docker build -t painelsaudefiocruz/painel-esus:${{ env.RELEASE_VERSION }} .

      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKER_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push Docker image to Docker Hub
        run: docker push painelsaudefiocruz/painel-esus:${{ env.RELEASE_VERSION }}

  conncet-vpn-ssh-aws:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Set up Pritunl profile and store client ID for later use
      - name: Setup Pritunl Profile
        id: pritunl-connection # A `Setup Step ID` has been added as a reference identifier for the output `client-id`.
        uses: nathanielvarona/pritunl-client-github-action@v1
        with:
          profile-file: ${{ secrets.PRITUNL_PROFILE_FILE }}
          start-connection: false # Do not establish a connection in this step.

      # Start VPN connection using stored client ID and password (if available)
      - name: Start VPN Connection Manually
        shell: bash
        run: |
          pritunl-client start ${{ steps.pritunl-connection.outputs.client-id }} \
            --password ${{ secrets.PRITUNL_PROFILE_PIN || '' }}
          # Wait for 10 seconds to allow the connection to establish
          sleep 10

      # Display VPN connection status
      - name: Show VPN Connection Status Manually
        shell: bash
        run: |
          pritunl-client list -j | jq 'sort_by(.name) | .[0] | { "Profile Name": .name, "Client Address": .client_address }'
          # Show the profile name and client address

      - name: Extract version from branch name
        id: extract_version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/heads/release/}" >> $GITHUB_ENV

      - name: Deploy Docker Swarm

        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.AWS_HOST}}
          key: ${{secrets.AWS_KEY}}
          username: ${{ secrets.AWS_USERNAME }}
          script: |
            cd livramento-hml
            echo "PARANDO SERVICOS DO SWARM"
            docker stack rm painel-esus-network

            echo "PARANDO CONTAINERS"
            docker stop $(docker ps -a -q)

            echo "REMOVENDO CONTAINERS"
            docker rm $(docker ps -a -q)

            echo 'REMOVENDO ANTIGO DOCKER COMPOSE: '
            sudo rm docker-compose.yml || true
            
            cat <<EOF > docker-compose.yml
              version: "3.3"
              services:
                painel_esus:
                  image: "painelsaudefiocruz/painel-esus:${{ env.RELEASE_VERSION }}"
                  environment:
                    RELOAD_BASE_SCHELDULE: '4:00'
                    DB_USER: '${{ secrets.DATABASE_USER }}'
                    DB_PASSWORD: '${{ secrets.DATABASE_PASSWORD }}'
                    DB_HOST: '${{ secrets.DATABASE_HOST  }}'
                    DB_PORT: '${{ secrets.DATABASE_PORT }}'
                    DB_DATABASE: '${{ secrets.DATABASE_NAME }}'
                    CIDADE_IBGE: 2508505
                    ESTADO: 'FC'
                    ADMIN_USERNAME: '${{ secrets.ADMIN_USERNAME }}'
                    ADMIN_PASSWORD: '${{ secrets.ADMIN_PASSWORD }}'
                    POPULATION: 20000
                    SECRET_TOKEN: 111111111111111111111
                    PASSWORD_SALT: 'painel'
                    BRIDGE_LOGIN_URL: 'https://dev.pec.bridge.ufsc.br/api/graphql'
                    ENV: linux
                    GENERATE_BASE: 'True'
                    CHUNK_SIZE: 100000
                    POLARS_SKIP_CPU_CHECK: 'True'
                    RELOAD_BASE_SCHELDULE_WEEKLY: 'True'
                    LOG_API: https://painel-logs.painelsaude.info
                    APPLICATION_VERSION: ${{ env.RELEASE_VERSION }}
                    MOCK: 'False'
                  ports:
                    - 5003:5001
              networks:
                default:
                  external:
                    name: painel-esus-network                      
            EOF
            
            export DOCKER_IMAGE='painelsaudefiocruz/painel-esus:${{ env.RELEASE_VERSION }}'
            
            echo 'DOCKER PULL'
            docker pull painelsaudefiocruz/painel-esus:${{ env.RELEASE_VERSION }}
            
            echo 'INICIANDO DEPLOY'
            docker stack deploy -c docker-compose.yml --resolve-image changed painel-esus-network
            echo 'DEPLOY SWARM'

      # Stop VPN connection using stored client ID (always run, even on failure)
      - name: Stop VPN Connection Manually
        if: ${{ always() }}
        shell: bash
        run: |
          pritunl-client stop ${{ steps.pritunl-connection.outputs.client-id }}
          # Stop the VPN connection
  
  notify-slack:
    runs-on: ubuntu-latest
    needs: conncet-vpn-ssh-aws

    steps:
      - name: Notify Slack
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }}  -H 'Content-type: application/json' --data '{"text": "*Deploy Finalizado* :rocket:\n  Vers√£o: *${{ github.head_ref || github.ref_name }}*"}'
