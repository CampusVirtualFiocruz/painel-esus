name: Build and Deploy to Private Docker Hub

on:
  push:
    branches: [v*]

jobs:
  build-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install dependencies
        working-directory: ./paineis-v2-front
        run: yarn

      - name: Build React project
        working-directory: ./paineis-v2-front
        run: |
          cat <<EOF > .env
          ${{ vars.ENV_FRONT }}
          EOF
          CI=false npm run build --prod

      - name: Print directory
        run: |
          ls -la
          cd ./paineis-v2-front/static-files
          ls -la

      # Salva a pasta 'paineis-v2-front/static-files' como um artifact
      - uses: actions/upload-artifact@v3
        with:
          name: Build
          path: ./paineis-v2-front/static-files

  build-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10" # Use the Python version you need

      - name: Install PyInstaller
        working-directory: ./painel-esus
        run: |
          python -m pip install --upgrade pip
          pip3 install -r requirements.txt

      - name: Create backend environment
        working-directory: ./painel-esus
        run: |
          cat <<EOF > .env
          ${{ vars.ENV_BACK }}
          EOF

      - name: Extract version from branch name
        id: extract_version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/heads/release/}" >> $GITHUB_ENV

  build-linux-artfact:
    needs: [build-frontend, build-backend]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Create empty files
        run: |
          # Cria arquivos vazios
          touch painel_esus.db painel-esus.sqls


      - name: Validate files and compress
        run: |
          # Confirma o diretório de execução
          echo "Current directory: $(pwd)"
          
          # Lista os diretórios para garantir que os arquivos existem
          ls -l
          ls -l painel-esus || echo "Directory painel-esus not found"
          ls -l paineis-v2-front || echo "Directory paineis-v2-front not found"
          
          # Cria o arquivo compactado com os arquivos na raiz
          tar -czf compressed_file.tar.gz \
            -C painel-esus ibge.csv \
            -C painel-esus icon \
            -C painel-esus painel_esus.db \
            -C painel-esus painel-esus.sqls \
            -C paineis-v2-front static-files

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: compressed-file
          path: compressed_file.tar.gz


  # create-exe-files:
  #   needs: [build-frontend, build-backend]
  #   runs-on: windows-latest

  #   steps:
  #     - name: Checkout the repository
  #       uses: actions/checkout@v2

  #     - name: Download files
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: Build
  #         path: ./paineis-v2-front/static-files
  #     - run: dir

  #     - name: List Downloaded Files
  #       run: |
  #         # Comandos para usar os arquivos estáticos e criar o EXE
  #         cd ./paineis-v2-front
  #         dir
  #         cd ./static-files
  #         dir

  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: "3.10" # Use the Python version you need

  #     - name: Install PyInstaller
  #       run: pip install pyinstaller
  #       shell: cmd

  #     - name: Build EXE config
  #       working-directory: ./painel-esus
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip3 install -r requirements.txt
  #         pyinstaller --icon=.\icon\config.ico -n config --onefile .\interface.py
  #       shell: cmd

  #     - name: Build EXE run
  #       working-directory: ./painel-esus
  #       run: |
  #         pyinstaller --icon=.\icon\Icon_Painel_Purple_ICO.ico -n painel-esus --onefile .\run.py
  #       shell: cmd

  #     - name: Set up Inno Setup
  #       run: |
  #         curl -LO https://jrsoftware.org/download.php/is.exe
  #         start /wait is.exe /SILENT /VERYSILENT
  #       shell: cmd

  #     - name: Build installer
  #       run: |
  #         dir .
  #         "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" ".\instalador\buildPainelScript2.5.iss"
  #       shell: cmd

  #     - name: Upload para AWS S3
  #       if: success() # Executa este step apenas se o build for bem-sucedido
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         AWS_REGION: "us-east-1"
  #       run: |
  #         aws s3 cp "D:/a/painel-esus/painel-esus/instalador/output/" \
  #         "s3://painel-esus-public/instalador/" --recursive --exclude "*" --include "painel-esus-setup*"
  #       shell: bash

  #     - name: Upload Artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: painel-esus
  #         path: D:\a\painel-esus\painel-esus\instalador\output
  #     - name: Download Artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: painel-esus

  # notify-slack:
  #   runs-on: ubuntu-latest
  #   needs: create-exe-files

  #   steps:
  #     - name: Notify Slack
  #       run: |
  #         version="${{ github.head_ref || github.ref_name }}"
  #         clean_version=$(echo "$version" | sed 's/^v//')
  #         curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} -H 'Content-type: application/json' \
  #           --data '{"text": "*Instalador Gerado* :inbox_tray:\n  Versão: *'"$clean_version"'* \n Download: https://painel-esus-public.s3.sa-east-1.amazonaws.com/instalador/painel-esus-setup'"$clean_version"'.exe"}'
        