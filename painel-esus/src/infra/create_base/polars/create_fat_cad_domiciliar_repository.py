import pandas as pd
from src.infra.db.settings.connection import DBConnectionHandler
from src.infra.create_base.polars.abstract_generate_base import AbstractGenerateBase

class CreateCadDomiciliarBaseRepository(AbstractGenerateBase):
    _base = 'tb_fat_cad_domiciliar'
    _sql = "select * from tb_fat_cad_domiciliar order by co_seq_fat_cad_domiciliar"

    def __init__(self):
        dtype = {
            'co_seq_fat_cad_domiciliar': pd.Int64Dtype(),
            'nu_uuid_ficha': pd.StringDtype(),
            'nu_uuid_ficha_origem': pd.StringDtype(),
            'qt_morador': pd.Int64Dtype(),
            'nu_comodo': pd.Int64Dtype(),
            'st_recusa_cadastro': pd.Int64Dtype(),
            'co_dim_tipo_ficha': pd.Int64Dtype(),
            'co_dim_tipo_imovel': pd.Int64Dtype(),
            'co_dim_profissional': pd.Int64Dtype(),
            'co_dim_municipio': pd.Int64Dtype(),
            'co_dim_unidade_saude': pd.Int64Dtype(),
            'co_dim_equipe': pd.Int64Dtype(),
            'co_dim_tempo': pd.Int64Dtype(),
            'co_dim_tempo_validade': pd.Int64Dtype(),
            'co_dim_tempo_validade_recusa': pd.Int64Dtype(),
            'co_dim_tipo_logradouro': pd.Int64Dtype(),
            'co_dim_municipio_cidadao': pd.Int64Dtype(),
            'co_dim_tipo_situacao_moradia': pd.Int64Dtype(),
            'co_dim_tipo_localizacao': pd.Int64Dtype(),
            'co_dim_tipo_domicilio': pd.Int64Dtype(),
            'co_dim_tipo_posse_terra': pd.Int64Dtype(),
            'co_dim_tipo_acesso_domicilio': pd.Int64Dtype(),
            'co_dim_tipo_material_parede': pd.Int64Dtype(),
            'co_dim_tipo_abastecimento_agua': pd.Int64Dtype(),
            'co_dim_tipo_tratamento_agua': pd.Int64Dtype(),
            'co_dim_tipo_escoamento_sanitar': pd.Int64Dtype(),
            'co_dim_tipo_destino_lixo': pd.Int64Dtype(),
            'co_dim_cbo': pd.Int64Dtype(),
            'st_disp_energia': pd.Int64Dtype(),
            'st_animal_domiciliar': pd.Int64Dtype(),
            'qt_animal_domiciliar': pd.Int64Dtype(),
            'st_animal_gato': pd.Int64Dtype(),
            'st_animal_cachorro': pd.Int64Dtype(),
            'st_animal_passaro': pd.Int64Dtype(),
            'st_animal_outros': pd.Int64Dtype(),
            'st_outros_prof_vinclds': pd.Int64Dtype(),
            'nu_micro_area': pd.StringDtype(),
            'st_processo_linha_tempo': pd.Int64Dtype(),
            'st_processo_familia': pd.Int64Dtype(),
            'st_familias': pd.Int64Dtype(),
            'ds_filtro_tipo_renda_familiar': pd.StringDtype(),
            'nu_cep': pd.StringDtype(),
            'no_logradouro': pd.StringDtype(),
            'nu_num_logradouro': pd.StringDtype(),
            'no_complemento': pd.StringDtype(),
            'no_bairro': pd.StringDtype(),
            'no_ponto_referencia': pd.StringDtype(),
            'nu_telefone_residencia': pd.StringDtype(),
            'nu_telefone_contato': pd.StringDtype(),
            'no_instituicao_nome': pd.StringDtype(),
            'no_instituicao_cargo': pd.StringDtype(),
            'nu_instituicao_cns': pd.StringDtype(),
            'nu_instituicao_telefone': pd.StringDtype(),
            'nu_uuid_dado_transp': pd.StringDtype(),
            'co_dim_tipo_origem_dado_transp': pd.Int64Dtype(),
            'co_dim_cds_tipo_origem': pd.Int64Dtype(),
            'st_gerado_automaticamente': pd.Int64Dtype(),
            'st_proc_operacionais': pd.Int64Dtype(),
            'st_processa_familita_terrtro': pd.Int64Dtype(),
            'nu_latitude': pd.Float64Dtype(),
            'nu_longitude': pd.Float64Dtype(),
            'co_dim_tipo_origem_energ_eletr': pd.Int64Dtype(),
            'co_dim_tipo_endereco': pd.Int64Dtype(),
            'co_dim_aldeia': pd.Int64Dtype(),
            'co_dim_municipio_aldeia': pd.Int64Dtype(),
            'nu_residencia_indigena': pd.StringDtype(),
            'st_animal_macaco': pd.Int64Dtype(),
            'st_animal_galinha': pd.Int64Dtype(),
            'st_animal_porco': pd.Int64Dtype(),
            'st_animal_repteis': pd.Int64Dtype()
        }
        super().__init__( DBConnectionHandler(), self._sql, dtype)

    def get_base(self):
        return self._base
